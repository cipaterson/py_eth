#!/usr/bin/env python3
import requests
import os
import sys
import json
import argparse

parser = argparse.ArgumentParser(
    description='Test support exists for every eth_method for every network')
parser.add_argument('-k', '--api_key', metavar='INFURA_API_KEY', default=None,
                    help='Infura API Key to use (INFURA_API_KEY env var used by default).')
parser.add_argument('-v', '--verbose', action='store_true', default=False,
                    help='Make output more verbose.')
parser.add_argument("network", help="network to request on")
parser.add_argument("method", help="method to execute")
parser.add_argument("params", nargs='*', default=None, help="parameters (default = none)")

args = parser.parse_args()
# print(args)
# exit()

InfuraApiKey = args.api_key or os.environ.get("INFURA_API_KEY") or os.environ.get("ETH")
if InfuraApiKey == None:
   print('Error: Use --api_key to provide a valid Infura API key', file=sys.stderr)
   parser.print_help()
   exit(1)

network = args.network
verbose = args.verbose

m = {}
m['jsonrpc'] = '2.0'
m['id'] = '1'
m['method'] = args.method
# m['params'] = args.params or []
m['params'] = []
for e in args.params:
  if e=='false':
    m['params'].append(False)
  elif e=='true':
    m['params'].append(True)
  else:
    m['params'].append(e)
data=json.dumps(m)
if verbose:
  print(data)
url = f'https://{network}.infura.io/v3/{InfuraApiKey}'
try:
  response = requests.post(url, data=data)
except:
  print(f"Error: Can't connect: {url}", file=sys.stderr)
  exit(1)

if response.status_code == 401:
  print(
      'Error: Status code 401, use --api_key to provide a valid Infura API key', file=sys.stderr)
  exit(1)

# Ignore 400 because many networks return it together with a valid error response we can interpret later
# Networks that do this: near, starknet, avalanche, base.
if response.status_code != 200 and response.status_code != 400:
  print(f'Error: {args.method}, Status code: {response.status_code}, URL: {url}', file=sys.stderr)
  exit(1)

jResponse = json.loads(response.text)

if jResponse.get('error') == None:
  print(f'{jResponse["result"]}')
else:
  print(f'{jResponse["error"]}')
